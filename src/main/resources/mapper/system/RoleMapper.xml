<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="role">
  <resultMap id="BaseResultMap" type="map">
    <result column="menuidlist" jdbcType="VARCHAR" property="menuidList"/>
  </resultMap>
  <select id="selectOper" parameterType="map" resultType="map">
    select path,name
    from rolemenu a
    left join menu b on a.menuid = b.id
    where roleid = #{roleid} and b.isoper = 1 and b.id like concat(#{menuid},'%')
  </select>

  <select id="selectWithProject" parameterType="map" resultType="map">
    select a.id,a.`desc`,a.levelid,concat(b.name,'-',a.name) name,a.projectid
    from role a
    left join project b on a.projectid = b.pinyin
    <where>
      <if test="id != null">
        a.id = #{id,jdbcType=INTEGER}
      </if>
      <if test="levelid != null">
        and levelid = #{levelid}
      </if>
      <if test="roleid != null">
        and a.roleid = #{roleid}
      </if>
      <if test="projectid != null">
        and a.projectid = #{projectid}
      </if>
    </where>
  </select>

  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    SELECT *
    FROM role a
    LEFT JOIN
    (
        SELECT b.roleid,group_concat(b.menuid) menuidList
        from rolemenu b
        where menuid not in (
            select c.parentid
            from menu c
            where c.id not in (select d.menuid from rolemenu d where d.roleid = b.id)
        )
        GROUP BY b.roleid
    ) e ON a.id = e.roleid
    <where>
      <if test="id != null">
        a.id = #{id,jdbcType=INTEGER}
      </if>
      <if test="levelid != null">
        and levelid = #{levelid}
      </if>
      <if test="roleid != null">
        and a.roleid = #{roleid}
      </if>
      <if test="projectid != null">
        and a.projectid = #{projectid}
      </if>
    </where>
  </select>

  <select id="selectMaxId" parameterType="map" resultType="INTEGER">
    SELECT MAX(id)
    FROM role
  </select>

  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="map">
    insert into role (id, name, `desc`
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{desc,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="desc != null">
        `desc`,
      </if>
      <if test="levelid != null">
        levelid,
      </if>
      <if test="projectid != null">
        projectid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="desc != null">
        #{desc,jdbcType=VARCHAR},
      </if>
      <if test="levelid != null">
        #{levelid},
      </if>
      <if test="projectid != null">
        #{projectid},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update role
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="desc != null">
        `desc` = #{desc,jdbcType=VARCHAR},
      </if>
      <if test="levelid != null">
        levelid = #{levelid,jdbcType=VARCHAR},
      </if>
      <if test="projectid != null">
        projectid = #{projectid},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="map">
    update role
    set name = #{name,jdbcType=VARCHAR},
      `desc` = #{desc,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
