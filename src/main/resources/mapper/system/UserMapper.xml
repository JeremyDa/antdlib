<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">

  <insert id="insertBatch" parameterType="map">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userList != null">
        avatar,
      </if>
      <if test="userList != null">
        phone,
      </if>
      <if test="userList != null">
        state,
      </if>
    </trim>
    values
    <foreach collection="userList" item="item" index="index" separator="," >
      <trim prefix=" (" suffix=")" suffixOverrides=",">
        <if test="item != null">
          #{item.avatar},
        </if>
        <if test="item != null">
          #{item.phone},
        </if>
        <if test="item != null">
          #{item.state},
        </if>
      </trim>
    </foreach>
  </insert>

  <select id="login" parameterType="map" resultType="map">
    select *
    from user
    where account = #{account} and password = #{password}
  </select>

  <select id="selectPasswordByUserid" parameterType="map" resultType="String">
    select password
    from user
    where account= #{account}
  </select>

  <select id="checkPassword" parameterType="map" resultType="int">
    select count(*) from user
    where account = #{account} and password = #{password}
  </select>

  <select id="selectByPrimaryKey" parameterType="map" resultType="map">
    select
    concat('',a.id) `key`,a.id, a.account, a.name, a.roleid, a.state, a.levelid, a.phone, a.avatar
    from user a
    left join role b on a.roleid = b.id
    <where>
      <if test="id != null">
        a.id = #{id,jdbcType=INTEGER}
      </if>
      <if test="accountRef != null">
        and account = #{accountRef}
      </if>
      <if test="password != null">
        and password = #{password}
      </if>
      <if test="roleid != null">
        and roleid in (${roleid})
      </if>
      <if test="levelid != null">
        AND levelid = #{levelid}
      </if>
      <if test="projectid != null">
        AND b.projectid = #{projectid}
      </if>
    </where>
    <if test="sort_key != null and sort_way != null">
      order by ${sort_key} ${sort_way}
    </if>
  </select>

  <select id="selectRoleidByProjectid" parameterType="map" resultType="map">
    select a.roleid,b.account
    from roleuser a
    left join user b on a.userid = b.id
    left join role c on a.roleid = c.id
    where c.projectid = #{projectid} and a.userid = #{userid}
    order by a.roleid
  </select>

  <select id="selectBatch" parameterType="map" resultType="map">
    select
    concat('',a.id) `key`,a.id, a.account, a.name, a.state, a.levelid, a.phone, a.avatar,
    b.roleid
    from (
      SELECT userid, group_concat(roleid) AS roleid
      FROM (
      SELECT c.*
      FROM roleuser c
      LEFT JOIN role d ON c.roleid = d.id
      order by c.userid,c.roleid
      ) b
      GROUP BY b.userid
    ) b
    left join user a on a.id = b.userid
    <where>
      <if test="id != null">
        a.id = #{id,jdbcType=INTEGER}
      </if>
      <if test="account != null and showAll == null">
        AND account = #{account,jdbcType=VARCHAR}
      </if>
      <if test="password != null">
        and password = #{password}
      </if>
      <if test="roleid != null">
        and roleid in (${roleid})
      </if>
      <if test="levelid != null">
        AND levelid = #{levelid}
      </if>
      <if test="projectid != null">
        and a.id in (
          select distinct a.userid
          from roleuser a
          left join role b on a.roleid = b.id
          where b.projectid = #{projectid}
        )
      </if>
    </where>
    <if test="sort_key != null and sort_way != null">
      order by ${sort_key} ${sort_way}
    </if>

  </select>

  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="map">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="acountRef != null">
        account,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="roleid != null">
        roleid,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="levelid != null">
        levelid,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="acountRef != null">
        #{acountRef,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        #{roleid,jdbcType=INTEGER},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="levelid != null">
        #{levelid},
      </if>
      <if test="phone != null">
        #{phone},
      </if>
      <if test="avatar != null">
        #{avatar},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update user
    <set>
      <if test="acountRef != null">
        account = #{acountRef},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        roleid = #{roleid,jdbcType=INTEGER},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="levelid != null">
        levelid = #{levelid},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone},
      </if>
      <if test="avatar != null">
        avatar = #{avatar},
      </if>
    </set>
    where id = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="map">
    update user
    set account = #{acountRef,jdbcType=VARCHAR},
      roleid = #{roleid,jdbcType=INTEGER},
      password = #{password,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="resetPassword" parameterType="map">
    update user set password = default
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
